#!/bin/bash

elit_path=$(cd $(dirname $0); pwd)

all="android \
anything \
auto-complete \
doxymacs \
dsvn \
ecb \
geben \
highlight-symbol \
javascript \
jdee \
nxhtml \
ri-emacs \
rinari \
ruby-debug \
ruby-mode \
w3m \
xcode-document \
xcscope \
yasnippet"

android_path="$elit_path/android.el"
android_download=""
android_install=""
android_depend=""

anything_path="$elit_path/anything.el"
anything_download="wget http://www.emacswiki.org/emacs/download/anything.el"
anything_install=""
anything_depend=""

auto_complete_path="$elit_path/auto-complete/"
auto_complete_download="git clone http://cx4a.org/repo/auto-complete.git/"
auto_complete_install=""
auto_complete_depend=""

cedet_path="$elit_path/cedet-1.0/"
cedet_download="wget http://sourceforge.net/projects/cedet/files/cedet/cedet-1.0.tar.gz"
cedet_install="tar xzf cedet-1.0.tar.gz"
cedet_depend=""

doxymacs_path="$elit_path/doxymacs"
doxymacs_download="git clone git://doxymacs.git.sourceforge.net/gitroot/doxymacs/doxymacs "
doxymacs_install="cd doxymacs && ./bootstrap && ./configure"
doxymacs_depend=""

dsvn_path="$elit_path/dsvn.el"
dsvn_download="wget http://svn.apache.org/repos/asf/subversion/trunk/contrib/client-side/emacs/dsvn.el"
dsvn_install=""
dsvn_depend=""

ecb_path="$elit_path/ecb-snap/"
ecb_download="wget http://ecb.sourceforge.net/cvs_snapshots/ecb.tar.gz"
ecb_install="tar xzf ecb.tar.gz"
ecb_depend="cedet"

geben_path="$elit_path/geben/"
geben_download="svn co http://geben-on-emacs.googlecode.com/svn/trunk/ geben"
geben_install=""
geben_depend=""

highlight_symbol_path="$elit_path/highlight-symbol.el"
highlight_symbol_download="wget http://nschum.de/src/emacs/highlight-symbol/highlight-symbol.el"
highlight_symbol_install=""
highlight_symbol_depend=""

javascript_path="$elit_path/javascript.el"
javascript_download="wget http://www.brgeight.se/downloads/emacs/javascript.el"
javascript_install=""
javascript_depend=""

jdee_path="$elit_path/jdee/"
jdee_download="svn co https://jdee.svn.sourceforge.net/svnroot/jdee/trunk/jdee/lisp jdee"
jdee_install=""
jdee_depend="ecb"

nxhtml_path="$elit_path/nxhtml/"
nxhtml_download="wget http://ourcomments.org/Emacs/DL/elisp/nxhtml/zip/nxhtml-2.08-100425.zip"
nxhtml_install="unzip nxhtml-2.08-100425.zip"
nxhtml_depend=""

ri_emacs_path="$elit_path/ri-emacs/"
ri_emacs_download="cvs -d :pserver:anonymous@rubyforge.org:/var/cvs/ri-emacs login"
ri_emacs_install="cvs -d :pserver:anonymous@rubyforge.org:/var/cvs/ri-emacs co ri-emacs"
ri_emacs_depend=""

rinari_path="$elit_path/rinari/"
rinari_download="git clone git://github.com/eschulte/rinari.git"
rinari_install="cd rinari && git submodule init && git submodule update"
rinari_depend=""

ruby_debug_path="$elit_path/ruby-debug/"
ruby_debug_download="svn co http://ruby-debug.rubyforge.org/svn/trunk/emacs ruby-debug"
ruby_debug_install=""
ruby_debug_depend=""

ruby_mode_path="$elit_path/ruby-mode/"
ruby_mode_download="svn co http://svn.ruby-lang.org/repos/ruby/trunk/misc ruby-mode"
ruby_mode_install=""

w3m_path="$elit_path/emacs-w3m/"
w3m_download="cvs -d :pserver:anonymous@cvs.namazu.org:/storage/cvsroot login"
w3m_install="cvs -d :pserver:anonymous@cvs.namazu.org:/storage/cvsroot co emacs-w3m"
w3m_depend=""

xcode_document_path="$elit_path/emacs-xcode-document-viewer/"
xcode_document_download="git clone http://github.com/imakado/emacs-xcode-document-viewer.git"
xcode_document_install="patch -p1 -d $elit_path/emacs-xcode-document-viewer -i $elit_path/xcode-document-viewer.patch"
xcode_depend="w3m anything"

xcscope_path="$elit_path/xcscope.el"
xcscope_download="wget http://cscope.cvs.sourceforge.net/viewvc/cscope/cscope/contrib/xcscope/xcscope.el"
xcscope_install=""
xcscope_depend=""

yasnippet_path="$elit_path/yasnippet"
yasnippet_download="svn checkout http://yasnippet.googlecode.com/svn/trunk/ yasnippet"
yasnippet_install=""
yasnippet_depend=""


usage() {
	echo Emacs Lisp Installation Tool
	echo 
	echo Usage: elit package-name
	echo
	echo Packages:
	echo "  all(all packages)"
	echo

	for pkg in $all; do
		installed=" "
		pkg_name=${pkg/-/_}
		eval path=\$${pkg_name}_path
		
		if [ -e $path ]; then
			installed="i"
		fi
		echo "$installed $pkg"
	done
}

install_dependency_package() {
	if [ -z "$1" ]; then
		return 1
	fi
	
	local pkg_name=${1/-/_}
	
	local path=
	eval path=\$${pkg_name}_path
	if [ -e $path ]; then
		return 2
	fi

	local dependency_packages=
	eval dependency_packages=\$${pkg_name}_depend
	for dep_pkg in $dependency_packages; do
		install_dependency_package $dep_pkg
	done
	
	echo "---> $1 installing..."

	local download=
	eval download=\$${pkg_name}_download
	if [ -n "$download" ]; then
		echo " --> $download"
		ret=$(eval $download)
		if [ $? -ne 0 ]; then
			echo "---> ERROR: failed to download $pkg_name"
			exit
		fi
	fi
	
	local install=
	eval install=\$${pkg_name}_install
	if [ -n "$install" ]; then
		echo " --> $install"
		ret=$(eval $install)
		if [ $? -ne 0 ]; then
			echo "---> ERROR: failed to install $pkg_name"
			exit
		fi
	fi
	
	echo "---> $1 successfully installed."
	return 0
}

install_package() {
	if [ -z "$1" ]; then
		return 1
	fi

	local pkg_name=${1/-/_}
	local path=
	eval path=\$${pkg_name}_path
	if [ -e $path ]; then
		echo "$1 already installed!!!"
		return 2
	fi
	
	echo "---> $1 installing..."

	local dependency_packages=
	eval dependency_packages=\$${pkg_name}_depend
	if [ ! -z "$dependency_packages" ]; then
		echo "---> $1 dependency packages : $dependency_packages installing..."
	fi
	
	for dep_pkg in $dependency_packages; do
		install_dependency_package $dep_pkg
	done
	
	if [ ! -z "$dependency_packages" ]; then
		echo "---> $1 dependency packages : $dependency_packages installed."
	fi
	
	local download=
	eval download=\$${pkg_name}_download
	if [ -n "$download" ]; then
		echo " --> $download"
		ret=$(eval $download)
		if [ $? -ne 0 ]; then
			echo "---> ERROR: failed to download $pkg_name"
			exit
		fi
	fi
	
	local install=
	eval install=\$${pkg_name}_install
	if [ -n "$install" ]; then
		echo " --> $install"
		ret=$(eval $install)
		if [ $? -ne 0 ]; then
			echo "---> ERROR: failed to install $pkg_name"
			exit
		fi
	fi
	
	echo "---> $1 successfully installed."
	return 0
}

if [ $# -eq 0 ]; then
	usage
	exit
fi

cd $elit_path

case "$1" in
	"all")
		for pkg in $all; do
			install_package $pkg
		done
		;;
	*)
		for pkg in $all; do
			if [ "$pkg" = "$1" ]; then
				install_package $pkg
				exit
			fi
		done
		usage
		;;
esac
